plugins {
    id 'org.beryx.runtime' version '1.8.4'
}
apply plugin: "java"

sourceCompatibility = 11
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs += [ project.file('assets').path ]

mainClassName = "com.ray3k.skincomposer.installer.Installer"
project.ext.assetsDir = new File("/assets")

def exeName = 'SkinComposerInstaller'
def mtPath = 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/mt.exe'
def winRarPath = 'C:/Program Files/WinRAR/WinRAR.exe'
def sevenZipPath = 'C:/Program Files/7-Zip/'

task dist(type: Jar, dependsOn: [':core:jpackageImage', ':uninstaller:jpackageApplyUAC']) {
    archiveFileName = "${project.appName}-installer.jar";
    from files(sourceSets.main.output.getClassesDirs())
    from files(sourceSets.main.output.resourcesDir)
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from files(project.assetsDir)
    from(files('../core/build/jpackage/SkinComposer/', '../uninstaller/build/jpackage/SkinComposerUninstaller/')) {
        into('installation/')
        exclude('runtime', '*.dll', '*.xml')
    }
    destinationDirectory = file("$buildDir/lib")
    manifest {
        attributes ('Main-Class': 'com.ray3k.skincomposer.installer.Installer')
    }
}

dist.dependsOn classes
jpackageImage.dependsOn dist

// changes file permission of JavaPackager executable to read and write
task filepermission(type: Exec) {
    commandLine 'attrib', '-R', "${buildDir}/jpackage/${exeName}/${exeName}.exe"
}

// Use mt.exe to apply a manifest to the JavaPackager executable
task jpackageApplyUAC(type: Exec, dependsOn: [jpackageImage, filepermission]) {
    tasks.findByName('filepermission').mustRunAfter jpackageImage

    workingDir project.projectDir
    commandLine = [
            mtPath,
            '-manifest', "${project.projectDir}/SkinComposerInstaller.exe.manifest",
            "-outputresource:${buildDir}\\jpackage\\${exeName}\\${exeName}.exe;#1"
    ]
}

task jpackageWinRarSfx(type: Exec, dependsOn: [jpackageApplyUAC]) {
    doFirst {
        mkdir "${buildDir}/winrar"
    }

    workingDir project.projectDir
    commandLine = [
            winRarPath,
            'a',
            '-m5',
            '-ep1',
            '-r',
            '-sfx',
            '-iiconinstaller.ico',
            '-zwinrar.txt',
            "${buildDir}/winrar/${exeName}.exe",
            "${buildDir}/jpackage/${exeName}/"
    ]
}

task jpackage7Zip(type: Exec, dependsOn: [jpackageApplyUAC]) {
    doFirst {
        mkdir "${buildDir}/7z"
    }

    workingDir project.projectDir
    commandLine = [
            sevenZipPath + '7z.exe',
            'a',
            "${buildDir}/7z/${exeName}.7z",
            "${buildDir}/jpackage/${exeName}/"
    ]
}
task jpackage7ZipSfx(type: Exec, dependsOn: [jpackage7Zip]) {
    workingDir project.projectDir
    commandLine = [
            "7zSFX.bat"
    ]
}

task jpackageZip(type: Zip, dependsOn: [jpackageWinRarSfx]) {
    archiveName 'skin-composer-windows.zip'
    from "${buildDir}/winrar/${exeName}.exe"
    destinationDirectory = file("${buildDir}/winrar")
}

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported',
               'java.compiler']
    distDir = file("$buildDir")
    jpackage {
        mainJar = "${appName}-installer.jar"
        imageOptions = ['--icon', file('../icons/logo.ico')]
        imageName = exeName
    }
}